"use strict";

function AdagiosConfig(data) {
    this.data = data;
}

angular.element(document).ready(function() {
    $.get("components/config/config.json", function(data) {
        angular.module("adagios.config").config([ "readConfigProvider", function(readConfigProvider) {
            readConfigProvider.loadJSON(data);
        } ]), angular.bootstrap(document, [ "adagios" ]);
    }, "json");
}), angular.module("adagios", [ "ngRoute", "joulupukki.sidebar", "joulupukki.topbar", "adagios.config", "joulupukki.view.home" ]).config([ "$routeProvider", function($routeProvider) {
    $routeProvider.otherwise({
        redirectTo: "/"
    });
} ]), angular.module("adagios.config", []).provider("readConfig", function() {
    var data = {};
    this.loadJSON = function(value) {
        data = value;
    }, this.$get = [ function() {
        return new AdagiosConfig(data);
    } ];
}), angular.module("joulupukki.live", []), angular.module("joulupukki.live").service("getProject", [ "$http", function($http) {
    return function($user, $project_name, $get_last_build) {
        var $url = "/v3/users/" + $user + "/" + $project_name + "?get_last_build=1";
        return 0 == $get_last_build && ($url = "/v3/users/" + $user + "/" + $project_name), 
        $http.get($url).error(function() {
            throw new Error("getProject : GET Request failed");
        });
    };
} ]).service("getLatestProjects", [ "$http", function($http) {
    return function($pattern) {
        var $url = "/v3/projects?limit=30&get_last_build=1";
        return $pattern && ($url = "/v3/projects?limit=30&get_last_build=1&pattern=" + $pattern), 
        $http.get($url).error(function() {
            throw new Error("getLatestProjects : GET Request failed");
        });
    };
} ]), angular.module("joulupukki.live").service("getBuild", [ "$http", function($http) {
    return function($username, $project_name, $build_id) {
        return $http.get("/v3/users/" + $username + "/" + $project_name + "/builds/" + $build_id).error(function() {
            throw new Error("getBuild: GET Request failed");
        });
    };
} ]).service("getLatestBuilds", [ "$http", function($http) {
    return function() {
        return $http.get("/v3/titilambert").error(function() {
            throw new Error("getLatestBuilds : GET Request failed");
        });
    };
} ]).service("getBuildOutput", [ "$http", function($http) {
    return function($username, $project_name, $build_id) {
        return $http.get("/v3/users/" + $username + "/" + $project_name + "/builds/" + $build_id + "/output").error(function() {
            throw new Error("getBuildOutput : GET Request failed");
        });
    };
} ]).service("postBuild", [ "$http", function($http) {
    return function($build) {
        var $data = {}, $username = $build.username, $project_name = $build.project_name;
        return $data.source_url = $build.source_url, $data.source_type = $build.source_type, 
        $build.branch && ($data.branch = $build.branch), $build.commit && ($data.commit = $build.commit), 
        $build.forced_distro && ($data.forced_distro = $build.forced_distro), $http.post("/v3/users/" + $username + "/" + $project_name + "/build", $data).error(function() {
            throw new Error("getBuild: GET Request failed");
        });
    };
} ]), angular.module("joulupukki.live").service("getJob", [ "$http", function($http) {
    return function($username, $project_name, $build_id, $job_id) {
        return $http.get("/v3/users/" + $username + "/" + $project_name + "/builds/" + $build_id + "/jobs/" + $job_id).error(function() {
            throw new Error("getBuild: GET Request failed");
        });
    };
} ]).service("getJobLog", [ "$http", function($http) {
    return function($username, $project_name, $build_id, $job_id) {
        return $http.get("/v3/users/" + $username + "/" + $project_name + "/builds/" + $build_id + "/jobs/" + $job_id + "/log?html=1").error(function() {
            throw new Error("getBuild: GET Request failed");
        });
    };
} ]), angular.module("joulupukki.filters", []).filter("timeElapsed", [ function() {
    return function(start, end) {
        return null == end ? moment.unix(start).fromNow() : moment.unix(start).from(moment.unix(end), !0);
    };
} ]), angular.module("joulupukki.sidebar", []).controller("SideBarCtrl", [ "$scope", "$rootScope", "getLatestProjects", function($scope, $rootScope, getLatestProjects) {
    $scope.search_project = "", $scope.$watch("search_project", function() {
        getLatestProjects($scope.search_project).success(function(data) {
            $scope.projects = data, $rootScope.latest_project = data[0];
        });
    });
} ]).directive("jlpkSidebar", function() {
    return {
        restrict: "E",
        templateUrl: "components/sidebar/sidebar.html"
    };
}), angular.module("joulupukki.topbar", [ "joulupukki.live" ]).controller("TopBarCtrl", [ "$scope", function() {} ]).directive("jlpkTopbar", function() {
    return {
        restrict: "E",
        templateUrl: "components/topbar/topbar.html"
    };
}), angular.module("joulupukki.main", [ "joulupukki.filters", "joulupukki.live", "joulupukki.main.build", "joulupukki.history" ]).controller("MainCtrl", [ "$scope", "$rootScope", "$route", "$routeParams", "$sce", "$location", "$anchorScroll", "$interval", "getProject", "getBuild", "getJob", "getJobLog", "getBuildOutput", "postBuild", function($scope, $rootScope, $route, $routeParams, $sce, $location, $anchorScroll, $interval, getProject, getBuild, getJob, getJobLog, getBuildOutput, postBuild) {
    var $username = $routeParams.user, $project_name = $routeParams.project, $build_id = $routeParams.build, $job_id = $routeParams.job, $controller_name = $route.current.controllerAs;
    $controller_name || ($controller_name = "project"), $scope.selected_tab = $controller_name, 
    $scope.restart = function() {
        postBuild($scope.build).success(function() {});
    }, $scope.$on("update_main", function() {
        $username && $project_name && ("history" == $controller_name ? getProject($username, $project_name, !1).success(function(data) {
            $scope.selected_project = data;
        }) : getProject($username, $project_name).success(function(data) {
            if ($scope.selected_project = data, !$build_id) {
                $scope.build = data.builds[0];
                var link = document.createElement("link");
                link.type = "image/x-icon", link.rel = "shortcut icon", link.href = "succeeded" == $scope.build.status ? "assets/images/jlpk_logo_succeeded.png" : "failed" == $scope.build.status ? "assets/images/jlpk_logo_failed.png" : "assets/images/jlpk_logo.png", 
                document.getElementsByTagName("head")[0].appendChild(link);
            }
        }), $build_id && getBuild($username, $project_name, $build_id).success(function(data) {
            $scope.build = data;
            var link = document.createElement("link");
            link.type = "image/x-icon", link.rel = "shortcut icon", link.href = "succeeded" == $scope.build.status ? "assets/images/jlpk_logo_succeeded.png" : "failed" == $scope.build.status ? "assets/images/jlpk_logo_failed.png" : "assets/images/jlpk_logo.png", 
            document.getElementsByTagName("head")[0].appendChild(link);
        }), $job_id && (getJob($username, $project_name, $build_id, $job_id).success(function(data) {
            $scope.job = data;
            var link = document.createElement("link");
            link.type = "image/x-icon", link.rel = "shortcut icon", link.href = "succeeded" == $scope.job.status ? "assets/images/jlpk_logo_succeeded.png" : "failed" == $scope.job.status ? "assets/images/jlpk_logo_failed.png" : "assets/images/jlpk_logo.png", 
            document.getElementsByTagName("head")[0].appendChild(link);
        }), getJobLog($username, $project_name, $build_id, $job_id).success(function(data) {
            $scope.joblog = $sce.trustAsHtml(data), $scope.gotoTop = function() {
                var old = $location.hash();
                $location.hash(""), $anchorScroll(), $location.hash(old);
            }, $scope.gotoBot = function() {
                var old = $location.hash();
                $location.hash("logbottom"), $anchorScroll(), $location.hash(old);
            }, angular.element(document).bind("scroll", function() {
                var $pre_log = angular.element(document.querySelector("#prelog")), logheight = $pre_log.prop("offsetHeight"), winheight = window.innerHeight, yoffset = window.pageYOffset, $top_btn = angular.element(document.querySelector("#to-top")), $bot_btn = angular.element(document.querySelector("#to-bot"));
                if (yoffset > winheight - 500) {
                    var new_height = logheight - winheight - yoffset + 500;
                    15 > new_height && (new_height = 15), $top_btn.css("bottom", new_height + "px"), 
                    $top_btn.css("visibility", "visible");
                    var new_height = yoffset - 460;
                    $bot_btn.css("top", new_height + "px"), $bot_btn.css("visibility", "visible");
                } else $bot_btn.css("visibility", "hidden");
            });
        })), "output" == $controller_name && getBuildOutput($username, $project_name, $build_id).success(function(data) {
            $scope.output = "null" != data ? data : !1;
        }));
    }), $username && $project_name ? $scope.$emit("update_main") : $rootScope.$watch("latest_project", function() {
        $rootScope.latest_project && ($username = $rootScope.latest_project.username, $scope.username = $username, 
        $project_name = $rootScope.latest_project.name, $scope.project_name = $project_name, 
        $scope.$emit("update_main"));
    });
} ]).directive("jlpkMain", [ "$http", "$compile", function() {
    return {
        restrict: "E",
        templateUrl: "components/main/main.html"
    };
} ]), angular.module("joulupukki.history", [ "joulupukki.filters", "joulupukki.live" ]).controller("MainHistoryCtrl", [ function() {} ]).directive("jlpkHistory", [ "$http", "$compile", function() {
    return {
        restrict: "E",
        templateUrl: "components/main/history/history.html"
    };
} ]), angular.module("joulupukki.main.build", [ "joulupukki.filters", "joulupukki.live", "joulupukki.main.build.job", "joulupukki.main.build.jobs", "joulupukki.main.build.output" ]).controller("MainBuildCtrl", [ function() {} ]).directive("jlpkMainBuild", [ "$http", "$compile", function() {
    return {
        restrict: "E",
        templateUrl: "components/main/build/build.html"
    };
} ]), angular.module("joulupukki.main.build.jobs", []).controller("MainBuildJobsCtrl", [ function() {} ]).directive("jlpkMainBuildJobs", [ "$http", "$compile", function() {
    return {
        restrict: "E",
        templateUrl: "components/main/build/jobs/jobs.html"
    };
} ]), angular.module("joulupukki.main.build.output", [ "joulupukki.filters", "joulupukki.live" ]).controller("MainBuildOutputCtrl", [ function() {} ]).directive("jlpkMainBuildOutput", [ "$http", "$compile", function() {
    return {
        restrict: "E",
        templateUrl: "components/main/build/output/output.html"
    };
} ]), angular.module("joulupukki.main.build.job", [ "joulupukki.live", "joulupukki.main.build.job.log" ]).controller("MainBuildJobCtrl", [ function() {} ]).directive("jlpkMainBuildJob", [ "$http", "$compile", function() {
    return {
        restrict: "E",
        templateUrl: "components/main/build/job/job.html"
    };
} ]), angular.module("joulupukki.main.build.job.log", [ "joulupukki.live" ]).controller("MainBuildJobLogCtrl", [ function() {} ]).directive("jlpkMainBuildJobLog", [ "$http", "$compile", function() {
    return {
        restrict: "E",
        templateUrl: "components/main/build/job/joblog/joblog.html"
    };
} ]), angular.module("joulupukki.view.home", [ "ngRoute", "joulupukki.main", "joulupukki.live" ]).value("dashboardConfig", {}).config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/home/", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl"
    }), $routeProvider.when("/home/:user", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl"
    }), $routeProvider.when("/home/:user/:project", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "project"
    }), $routeProvider.when("/home/:user/:project/builds/", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "history"
    }), $routeProvider.when("/home/:user/:project/builds/:build", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "build"
    }), $routeProvider.when("/home/:user/:project/builds/:build/output", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "output"
    }), $routeProvider.when("/home/:user/:project/builds/:build/jobs/:job", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "job"
    });
} ]).controller("HomeCtrl", [ "$scope", "$rootScope", "$routeParams", "dashboardConfig", "getLatestProjects", function() {} ]).run([ "readConfig", "dashboardConfig", function(readConfig, dashboardConfig) {
    var viewsConfig = readConfig.data;
    angular.forEach(viewsConfig, function(config, view) {
        "dashboard" === config.template && (dashboardConfig[view] = config);
    });
} ]);