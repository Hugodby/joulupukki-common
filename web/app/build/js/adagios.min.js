"use strict";

function AdagiosConfig(data) {
    this.data = data;
}

angular.element(document).ready(function() {
    $.get("components/config/config.json", function(data) {
        angular.module("adagios.config").config([ "readConfigProvider", function(readConfigProvider) {
            readConfigProvider.loadJSON(data);
        } ]), angular.bootstrap(document, [ "adagios" ]);
    }, "json");
}), angular.module("adagios", [ "ngRoute", "joulupukki.sidebar", "joulupukki.topbar", "adagios.config", "joulupukki.view.home", "adagios.view.singleTable" ]).config([ "$routeProvider", function($routeProvider) {
    $routeProvider.otherwise({
        redirectTo: "/"
    });
} ]), angular.module("adagios.config", []).provider("readConfig", function() {
    var data = {};
    this.loadJSON = function(value) {
        data = value;
    }, this.$get = [ function() {
        return new AdagiosConfig(data);
    } ];
}), angular.module("joulupukki.live", []), angular.module("joulupukki.live"), angular.module("joulupukki.live").service("getProject", [ "$http", function($http) {
    return function($user, $project_name, $get_last_build) {
        var $url = "/v3/users/" + $user + "/" + $project_name + "?get_last_build=1";
        return 0 == $get_last_build && ($url = "/v3/users/" + $user + "/" + $project_name), 
        $http.get($url).error(function() {
            throw new Error("getProject : GET Request failed");
        });
    };
} ]).service("getLatestProjects", [ "$http", function($http) {
    return function($pattern) {
        var $url = "/v3/projects?limit=30&get_last_build=1";
        return $pattern && ($url = "/v3/projects?limit=30&get_last_build=1&pattern=" + $pattern), 
        $http.get($url).error(function() {
            throw new Error("getLatestProjects : GET Request failed");
        });
    };
} ]), angular.module("joulupukki.live").service("getBuild", [ "$http", function($http) {
    return function($username, $project_name, $build_id) {
        return $http.get("/v3/users/" + $username + "/" + $project_name + "/builds/" + $build_id).error(function() {
            throw new Error("getBuild: GET Request failed");
        });
    };
} ]).service("getLatestBuilds", [ "$http", function($http) {
    return function() {
        return $http.get("/v3/titilambert").error(function() {
            throw new Error("getLatestBuilds : GET Request failed");
        });
    };
} ]).service("getBuildOutput", [ "$http", function($http) {
    return function($username, $project_name, $build_id) {
        return $http.get("/v3/users/" + $username + "/" + $project_name + "/builds/" + $build_id + "/output").error(function() {
            throw new Error("getBuildOutput : GET Request failed");
        });
    };
} ]).service("postBuild", [ "$http", function($http) {
    return function($build) {
        var $data = {}, $username = $build.username, $project_name = $build.project_name;
        return $data.source_url = $build.source_url, $data.source_type = $build.source_type, 
        $build.branch && ($data.branch = $build.branch), $build.commit && ($data.commit = $build.commit), 
        $build.forced_distro && ($data.forced_distro = $build.forced_distro), $http.post("/v3/users/" + $username + "/" + $project_name + "/build", $data).error(function() {
            throw new Error("getBuild: GET Request failed");
        });
    };
} ]), angular.module("joulupukki.live").service("getJob", [ "$http", function($http) {
    return function($username, $project_name, $build_id, $job_id) {
        return $http.get("/v3/users/" + $username + "/" + $project_name + "/builds/" + $build_id + "/jobs/" + $job_id).error(function() {
            throw new Error("getBuild: GET Request failed");
        });
    };
} ]).service("getJobLog", [ "$http", function($http) {
    return function($username, $project_name, $build_id, $job_id) {
        return $http.get("/v3/users/" + $username + "/" + $project_name + "/builds/" + $build_id + "/jobs/" + $job_id + "/log?html=1").error(function() {
            throw new Error("getBuild: GET Request failed");
        });
    };
} ]), angular.module("ngJustGage", []).directive("justGage", [ "$timeout", function($timeout) {
    return {
        restrict: "EA",
        scope: {
            id: "@",
            "class": "@",
            min: "=",
            max: "=",
            title: "@",
            value: "=",
            options: "="
        },
        template: '<div id="{{id}}-justgage" class="{{class}}"></div>',
        link: function(scope) {
            $timeout(function() {
                var options, key, graph;
                if (options = {
                    id: scope.id + "-justgage",
                    min: scope.min,
                    max: scope.max,
                    title: scope.title,
                    value: scope.value
                }, scope.options) for (key in scope.options) scope.options.hasOwnProperty(key) && (options[key] = scope.options[key]);
                graph = new JustGage(options), scope.$watch("max", function(updatedMax) {
                    void 0 !== updatedMax && graph.refresh(scope.value, updatedMax);
                }, !0), scope.$watch("value", function(updatedValue) {
                    void 0 !== updatedValue && graph.refresh(updatedValue);
                }, !0);
            });
        }
    };
} ]), angular.module("adagios.filters", []).filter("timeElapsed", [ function() {
    return function(start, end) {
        return null == end ? moment.unix(start).fromNow() : moment.unix(start).from(moment.unix(end), !0);
    };
} ]), angular.module("joulupukki.sidebar", []).controller("SideBarCtrl", [ "$scope", "$rootScope", "getLatestProjects", function($scope, $rootScope, getLatestProjects) {
    $scope.search_project = "", $scope.$watch("search_project", function() {
        getLatestProjects($scope.search_project).success(function(data) {
            $scope.projects = data, $rootScope.latest_project = data[0];
        });
    });
} ]).directive("jlpkSidebar", function() {
    return {
        restrict: "E",
        templateUrl: "components/sidebar/sidebar.html"
    };
}), angular.module("joulupukki.topbar", [ "joulupukki.live" ]).controller("TopBarCtrl", [ "$scope", function() {} ]).directive("jlpkTopbar", function() {
    return {
        restrict: "E",
        templateUrl: "components/topbar/topbar.html"
    };
}), angular.module("adagios.tactical", [ "adagios.tactical.status_overview", "adagios.tactical.current_health", "adagios.tactical.top_alert_producers" ]).value("tacticalConfig", {}).value("TacticalConfigObj", function(config) {
    this.title = config.title, this.statusOverview = config.components.statusOverview, 
    this.currentHealth = config.components.currentHealth, this.topAlertProducers = config.components.topAlertProducers;
}).controller("TacticalCtrl", [ "$scope", "tacticalConfig", function($scope, tacticalConfig) {
    $scope.statusOverview = tacticalConfig.statusOverview, $scope.currentHealth = tacticalConfig.currentHealth, 
    $scope.topAlertProducers = tacticalConfig.topAlertProducers, $('a[data-toggle="tab"]').on("click", function(evt) {
        evt.preventDefault();
    });
} ]).directive("adgTactical", [ "tacticalConfig", function(tacticalConfig) {
    return {
        restrict: "E",
        templateUrl: "components/tactical/tactical.html",
        compile: function() {
            return {
                pre: function(scope, iElement, iAttrs) {
                    tacticalConfig.statusOverview = JSON.parse(iAttrs.statusOverview.toLowerCase()), 
                    tacticalConfig.currentHealth = JSON.parse(iAttrs.currentHealth.toLowerCase()), tacticalConfig.topAlertProducers = JSON.parse(iAttrs.topAlertProducers.toLowerCase());
                }
            };
        }
    };
} ]), angular.module("adagios.tactical.status_overview", [ "ngRoute" ]).controller("TacticalStatusOverViewCtrl", [ "$scope", function($scope) {
    $scope.hosts = {
        count: 104,
        problems: 14
    }, $scope.services = {
        count: 1126,
        problems: 42
    };
} ]).directive("adgStatusOverview", function() {
    return {
        restrict: "E",
        templateUrl: "components/tactical/status_overview/status_overview.html"
    };
}), angular.module("adagios.tactical.current_health", [ "ngRoute", "ngJustGage" ]).controller("TacticalCurrentHealth", [ "$scope", function($scope) {
    $scope.hosts = 75.2, $scope.services = 94.4;
} ]).directive("adgCurrentHealth", function() {
    return {
        restrict: "E",
        templateUrl: "components/tactical/current_health/current_health.html"
    };
}), angular.module("adagios.tactical.top_alert_producers", [ "ngRoute" ]).controller("TacticalTopAlertProducers", [ "$scope", function($scope) {
    $scope.hosts = [ {
        host_name: "server-18",
        problems: 10
    }, {
        host_name: "server-22",
        problems: 5
    }, {
        host_name: "server-13",
        problems: 3
    } ];
} ]).directive("adgTopAlertProducers", function() {
    return {
        restrict: "E",
        templateUrl: "components/tactical/top_alert_producers/top_alert_producers.html"
    };
}), angular.module("adagios.table.actionbar", []).factory("actionbarFilters", function() {
    var actionbarFilters = {
        activeFilter: {},
        possibleFilters: [ {
            text: "All",
            name: "all"
        }, {
            text: "All OK",
            name: "all_ok"
        }, {
            text: "All Acknowledged",
            name: "all_acknowledged"
        }, {
            text: "All in Downtime",
            name: "all_downtime"
        } ]
    };
    return actionbarFilters;
}).controller("TableActionbarCtrl", [ "$scope", "actionbarFilters", function($scope, actionbarFilters) {
    $scope.actionbarFilters = actionbarFilters, $scope.actionbarFilters.activeFilter = $scope.actionbarFilters.possibleFilters[0], 
    $scope.activateFilter = function(item) {
        $scope.actionbarFilters.activeFilter = $scope.actionbarFilters.possibleFilters[item];
    };
} ]).filter("actionbarSelectFilter", function() {
    return function(items, activeFilter) {
        var i, out = [];
        if (activeFilter) return items;
        if (items) if ("all" === activeFilter.name) for (i = 0; i < items.length; i += 1) out.push(items[i]); else if ("all_ok" === activeFilter.name) for (i = 0; i < items.length; i += 1) 0 === items[i].state && out.push(items[i]); else "all_acknowledged" === activeFilter.name ? console.log("This filter is not yet implemented") : "all_downtime" === activeFilter.name && console.log("This filter is not yet implemented");
        return out;
    };
}).directive("adgTableActionbar", function() {
    return {
        restrict: "E",
        templateUrl: "components/table/actionbar/actionbar.html"
    };
}), angular.module("adagios.table", [ "joulupukki.live", "adagios.table.actionbar", "adagios.filters", "adagios.table.cell_host", "adagios.table.cell_duration", "adagios.table.cell_service_check", "adagios.table.cell_last_check", "adagios.table.cell_hosts_host", "adagios.table.cell_host_address", "adagios.table.cell_host_status" ]).value("tableConfig", {
    cellToFieldsMap: {},
    cellWrappableField: {},
    index: 0
}).controller("TableCtrl", [ "$scope", "$interval", "getServices", "tableConfig", "actionbarFilters", function($scope, $interval, getServices, tableConfig, actionbarFilters) {
    var getData, i, requestFields = [], filters = JSON.parse(tableConfig[tableConfig.index].filters), conf = tableConfig[tableConfig.index];
    for ($scope.cellsName = conf.cells.name, $scope.cellsText = conf.cells.text, $scope.cellIndexes = [], 
    i = 0; i < $scope.cellsName.length; i += 1) $scope.cellIndexes.push(i);
    angular.forEach($scope.cellsName, function(key) {
        angular.forEach(tableConfig.cellToFieldsMap[key], function(_value) {
            requestFields.push(_value);
        });
    }), getData = function(requestFields, filters, apiName) {
        getServices(requestFields, filters, apiName).success(function(data) {
            $scope.entries = data;
        });
    }, getData(requestFields, filters, conf.apiName), "0" !== tableConfig.refreshInterval && $interval(function() {
        getData(requestFields, filters, conf.apiName);
    }, tableConfig.refreshInterval), $scope.actionbarFilters = actionbarFilters, $scope.tableIndex = tableConfig.index, 
    tableConfig.index += 1;
} ]).directive("adgTable", [ "$http", "$compile", "tableConfig", function($http, $compile, tableConfig) {
    return {
        restrict: "E",
        compile: function() {
            return function(scope, element, attrs) {
                if (!(attrs.cellsText && attrs.cellsName && attrs.apiName && attrs.isWrappable)) throw new Error('<adg-table> "cells-text", "cells-name", "api-name" and "is-wrappable" attributes must be defined');
                tableConfig[attrs.tableId] = {}, tableConfig[attrs.tableId].filters = {}, tableConfig[attrs.tableId].cells = {
                    text: [],
                    name: []
                }, tableConfig[attrs.tableId].cells.text = attrs.cellsText.split(","), tableConfig[attrs.tableId].cells.name = attrs.cellsName.split(","), 
                tableConfig[attrs.tableId].apiName = attrs.apiName, tableConfig[attrs.tableId].isWrappable = !1, 
                tableConfig[attrs.tableId].isWrappable = attrs.isWrappable, tableConfig[attrs.tableId].noRepeatCell = attrs.noRepeatCell, 
                tableConfig[attrs.tableId].tableId = attrs.tableId, attrs.refreshInterval && (tableConfig.refreshInterval = attrs.refreshInterval), 
                attrs.filters && (tableConfig[attrs.tableId].filters = attrs.filters);
                var template = "components/table/table.html";
                $http.get(template, {
                    cache: !0
                }).success(function(data) {
                    var elem = $compile(data)(scope);
                    element.append(elem);
                });
            };
        }
    };
} ]).directive("adgCell", [ "$http", "$compile", function($http, $compile) {
    return {
        restrict: "A",
        compile: function() {
            return function(scope, element, attrs) {
                if (!attrs.cellName) throw new Error('<adg-cell> "cell-name" attribute must be defined');
                var template = "components/table/cell_" + attrs.cellName + "/cell_" + attrs.cellName + ".html";
                $http.get(template, {
                    cache: !0
                }).success(function(data) {
                    var td = $compile(data)(scope);
                    element.replaceWith(td);
                });
            };
        }
    };
} ]).value("TableConfigObj", function(config) {
    this.title = config.title, this.CellsText = config.cells.text.join(), this.CellsName = config.cells.name.join(), 
    this.ApiName = config.apiName, this.Filters = config.filters, this.IsWrappable = config.isWrappable, 
    this.NoRepeatCell = config.noRepeatCell;
}).filter("wrappableStyle", [ "tableConfig", function(tableConfig) {
    return function(input, scope) {
        var i, last = "", entry = {}, parent_found = !1, class_name = [ "", "" ], fieldToWrap = tableConfig.cellWrappableField[tableConfig[scope.tableIndex].noRepeatCell];
        if (void 0 === fieldToWrap) return input;
        for (tableConfig[scope.tableIndex].isWrappable && (class_name = [ "state--hasChild", "state--isChild" ]), 
        i = 0; i < input.length; i += 1) entry = input[i], entry[fieldToWrap] === last ? input[i - 1].has_child || parent_found ? (entry.is_child = 1, 
        entry.child_class = class_name[1]) : (input[i - 1].has_child = 1, input[i - 1].child_class = class_name[0], 
        entry.child_class = class_name[1], parent_found = !0) : parent_found = !1, last = entry[fieldToWrap];
        return input;
    };
} ]).filter("noRepeat", [ "tableConfig", function(tableConfig) {
    return function(items, scope) {
        var previous, newItems = [], fieldToCompare = tableConfig.cellWrappableField[tableConfig[scope.tableIndex].noRepeatCell], new_attr = tableConfig[scope.tableIndex].noRepeatCell + "_additionnalClass";
        return angular.forEach(items, function(item) {
            previous === item[fieldToCompare] ? item[new_attr] = "state--rmChild" : (previous = item[fieldToCompare].slice(0), 
            item[new_attr] && (item[new_attr] = item[new_attr].replace("state--rmChild", ""))), 
            newItems.push(item);
        }), newItems;
    };
} ]), angular.module("joulupukki.main", [ "joulupukki.live" ]).controller("MainCtrl", [ "$scope", "$rootScope", "$route", "$routeParams", "$sce", "$location", "$anchorScroll", "$interval", "getProject", "getBuild", "getJob", "getJobLog", "getBuildOutput", "postBuild", function($scope, $rootScope, $route, $routeParams, $sce, $location, $anchorScroll, $interval, getProject, getBuild, getJob, getJobLog, getBuildOutput, postBuild) {
    var $username = $routeParams.user, $project_name = $routeParams.project, $build_id = $routeParams.build, $job_id = $routeParams.job, $controller_name = $route.current.controllerAs;
    $controller_name || ($controller_name = "project"), $scope.selected_tab = $controller_name, 
    $scope.restart = function() {
        postBuild($scope.build).success(function() {});
    }, $scope.$on("update_main", function() {
        $username && $project_name && ("history" == $controller_name ? getProject($username, $project_name, !1).success(function(data) {
            $scope.selected_project = data;
        }) : getProject($username, $project_name).success(function(data) {
            if ($scope.selected_project = data, !$build_id) {
                $scope.build = data.builds[0];
                var link = document.createElement("link");
                link.type = "image/x-icon", link.rel = "shortcut icon", link.href = "succeeded" == $scope.build.status ? "assets/images/jlpk_logo_succeeded.png" : "failed" == $scope.build.status ? "assets/images/jlpk_logo_failed.png" : "assets/images/jlpk_logo.png", 
                document.getElementsByTagName("head")[0].appendChild(link);
            }
        }), $build_id && getBuild($username, $project_name, $build_id).success(function(data) {
            $scope.build = data;
            var link = document.createElement("link");
            link.type = "image/x-icon", link.rel = "shortcut icon", link.href = "succeeded" == $scope.build.status ? "assets/images/jlpk_logo_succeeded.png" : "failed" == $scope.build.status ? "assets/images/jlpk_logo_failed.png" : "assets/images/jlpk_logo.png", 
            document.getElementsByTagName("head")[0].appendChild(link);
        }), $job_id && (getJob($username, $project_name, $build_id, $job_id).success(function(data) {
            $scope.job = data;
            var link = document.createElement("link");
            link.type = "image/x-icon", link.rel = "shortcut icon", link.href = "succeeded" == $scope.job.status ? "assets/images/jlpk_logo_succeeded.png" : "failed" == $scope.job.status ? "assets/images/jlpk_logo_failed.png" : "assets/images/jlpk_logo.png", 
            console.log("DDD"), document.getElementsByTagName("head")[0].appendChild(link);
        }), getJobLog($username, $project_name, $build_id, $job_id).success(function(data) {
            $scope.joblog = $sce.trustAsHtml(data), $scope.gotoTop = function() {
                var old = $location.hash();
                $location.hash(""), $anchorScroll(), $location.hash(old);
            }, $scope.gotoBot = function() {
                var old = $location.hash();
                $location.hash("logbottom"), $anchorScroll(), $location.hash(old);
            }, angular.element(document).bind("scroll", function() {
                var $pre_log = angular.element(document.querySelector("#prelog")), logheight = $pre_log.prop("offsetHeight"), winheight = window.innerHeight, yoffset = window.pageYOffset, $top_btn = angular.element(document.querySelector("#to-top")), $bot_btn = angular.element(document.querySelector("#to-bot"));
                if (yoffset > winheight - 475) {
                    var new_height = logheight - winheight - yoffset + 475;
                    15 > new_height && (new_height = 15), $top_btn.css("bottom", new_height + "px"), 
                    $top_btn.css("visibility", "visible");
                    var new_height = yoffset - 460;
                    $bot_btn.css("top", new_height + "px"), $bot_btn.css("visibility", "visible");
                } else $bot_btn.css("visibility", "hidden");
            });
        })), "output" == $controller_name && getBuildOutput($username, $project_name, $build_id).success(function(data) {
            $scope.output = "null" != data ? data : !1;
        }));
    }), $username && $project_name ? $scope.$emit("update_main") : $rootScope.$watch("latest_project", function() {
        $rootScope.latest_project && ($username = $rootScope.latest_project.username, $scope.username = $username, 
        $project_name = $rootScope.latest_project.name, $scope.project_name = $project_name, 
        $scope.$emit("update_main"));
    });
} ]).directive("jlpkMain", [ "$http", "$compile", function() {
    return {
        restrict: "E",
        templateUrl: "components/main/main.html"
    };
} ]), angular.module("adagios.table.cell_duration", [ "adagios.table" ]).controller("CellDurationCtrl", [ function() {
    angular.noop();
} ]).run([ "tableConfig", function(tableConfig) {
    tableConfig.cellToFieldsMap.duration = [ "last_state_change" ];
} ]), angular.module("adagios.table.cell_host", [ "adagios.table" ]).controller("CellHostCtrl", [ "$scope", function($scope) {
    $scope.cell_name = "host", $scope.state = 0 === $scope.entry.host_state ? "state--ok" : 1 === $scope.entry.host_state ? "state--warning" : "" === $scope.entry.host_state ? "" : "state--error";
} ]).run([ "tableConfig", function(tableConfig) {
    tableConfig.cellToFieldsMap.host = [ "host_state", "host_name" ], tableConfig.cellWrappableField.host = "host_name";
} ]), angular.module("adagios.table.cell_last_check", [ "adagios.table" ]).controller("CellLastCheckCtrl", [ function() {
    angular.noop();
} ]).run([ "tableConfig", function(tableConfig) {
    tableConfig.cellToFieldsMap.last_check = [ "last_check" ];
} ]), angular.module("adagios.table.cell_service_check", [ "adagios.table" ]).controller("CellServiceCheckCtrl", [ "$scope", function($scope) {
    $scope.state = 0 === $scope.entry.state ? "state--ok" : 1 === $scope.entry ? "state--warning" : "state--error";
} ]).run([ "tableConfig", function(tableConfig) {
    tableConfig.cellToFieldsMap.service_check = [ "state", "description", "plugin_output" ];
} ]), angular.module("adagios.table.cell_hosts_host", [ "adagios.table" ]).controller("CellHostsHostCtrl", [ "$scope", function($scope) {
    $scope.state = 0 === $scope.entry.state ? "state--ok" : 1 === $scope.entry.state ? "state--warning" : "" === $scope.entry.state ? "" : "state--error";
} ]).run([ "tableConfig", function(tableConfig) {
    tableConfig.cellToFieldsMap.hosts_host = [ "name", "state" ];
} ]), angular.module("adagios.table.cell_host_address", [ "adagios.table" ]).controller("CellHostAddressCtrl", [ function() {
    angular.noop();
} ]).run([ "tableConfig", function(tableConfig) {
    tableConfig.cellToFieldsMap.host_address = [ "host_address" ];
} ]), angular.module("adagios.table.cell_host_status", [ "adagios.table" ]).controller("CellHostStatusCtrl", [ "$scope", function($scope) {
    $scope.entry.host_status = "", $scope.alert_level = "", 0 === $scope.entry.last_check ? ($scope.alert_level = "alert alert-info", 
    $scope.entry.host_status = "Pending") : 0 === $scope.entry.state ? ($scope.alert_level = "alert alert-success", 
    $scope.entry.host_status = "Host UP") : ($scope.alert_level = "alert alert-danger", 
    $scope.entry.host_status = 0 !== $scope.entry.childs.length ? "Network outage" : "Host down");
} ]).run([ "tableConfig", function(tableConfig) {
    tableConfig.cellToFieldsMap.host_status = [ "state", "last_check", "childs" ];
} ]), angular.module("adagios.view.dashboard", [ "ngRoute", "adagios.tactical", "adagios.table", "joulupukki.live" ]).value("dashboardConfig", {}).config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/dashboard", {
        templateUrl: "dashboard/dashboard.html",
        controller: "DashboardCtrl"
    });
} ]).controller("DashboardCtrl", [ "$scope", "$routeParams", "dashboardConfig", "getServices", "tableConfig", "TableConfigObj", "TacticalConfigObj", function($scope, $routeParams, dashboardConfig, getServices, tableConfig, TableConfigObj, TacticalConfigObj) {
    var component, config, viewName, fields = [ "state" ], filters = {
        isnot: {
            state: [ "0" ]
        }
    }, apiName = "hosts", components = [], i = 0;
    if (tableConfig.index = 0, !$routeParams.view) throw new Error("ERROR : 'view' GET parameter must be the custom view name");
    for (viewName = $routeParams.view, $scope.dashboardTitle = dashboardConfig[viewName].title, 
    $scope.dashboardTemplate = dashboardConfig[viewName].template, $scope.dashboardRefreshInterval = dashboardConfig[viewName].refreshInterval, 
    $scope.dashboardTactical = [], $scope.dashboardTables = [], components = dashboardConfig[viewName].components, 
    i = 0; i < components.length; i += 1) component = components[i], config = component.config, 
    "table" === component.type ? $scope.dashboardTables.push(new TableConfigObj(config)) : "tactical" === component.type && $scope.dashboardTactical.push(new TacticalConfigObj(config));
    getServices(fields, filters, apiName).success(function(data) {
        $scope.nbHostProblems = data.length;
    });
} ]).run([ "readConfig", "dashboardConfig", function(readConfig, dashboardConfig) {
    var viewsConfig = readConfig.data;
    angular.forEach(viewsConfig, function(config, view) {
        "dashboard" === config.template && (dashboardConfig[view] = config);
    });
} ]), angular.module("joulupukki.view.home", [ "ngRoute", "joulupukki.main", "joulupukki.live" ]).value("dashboardConfig", {}).config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/home/", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl"
    }), $routeProvider.when("/home/:user", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl"
    }), $routeProvider.when("/home/:user/:project", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "project"
    }), $routeProvider.when("/home/:user/:project/builds/", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "history"
    }), $routeProvider.when("/home/:user/:project/builds/:build", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "build"
    }), $routeProvider.when("/home/:user/:project/builds/:build/output", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "output"
    }), $routeProvider.when("/home/:user/:project/builds/:build/jobs/:job", {
        templateUrl: "home/home.html",
        controller: "HomeCtrl",
        controllerAs: "job"
    });
} ]).controller("HomeCtrl", [ "$scope", "$routeParams", "dashboardConfig", "getLatestProjects", function() {} ]).run([ "readConfig", "dashboardConfig", function(readConfig, dashboardConfig) {
    var viewsConfig = readConfig.data;
    angular.forEach(viewsConfig, function(config, view) {
        "dashboard" === config.template && (dashboardConfig[view] = config);
    });
} ]), angular.module("adagios.view.singleTable", [ "ngRoute", "adagios.tactical.status_overview", "adagios.tactical.current_health", "adagios.tactical.top_alert_producers", "adagios.table" ]).value("singleTableConfig", {}).config([ "$routeProvider", function($routeProvider) {
    $routeProvider.when("/singleTable", {
        templateUrl: "single_table/single_table.html",
        controller: "SingleTableCtrl"
    });
} ]).controller("SingleTableCtrl", [ "$scope", "$routeParams", "singleTableConfig", "tableConfig", "TableConfigObj", function($scope, $routeParams, singleTableConfig, tableConfig, TableConfigObj) {
    var viewName = "";
    if (tableConfig.index = 0, !$routeParams.view) throw new Error("ERROR : 'view' GET parameter must be the custom view name");
    viewName = $routeParams.view, $scope.tableConfig = new TableConfigObj(singleTableConfig[viewName].components[0].config), 
    $scope.singleTableTitle = singleTableConfig[viewName].title, $scope.singleTableRefreshInterval = singleTableConfig[viewName].refreshInterval;
} ]).run([ "readConfig", "singleTableConfig", function(readConfig, singleTableConfig) {
    var viewsConfig = readConfig.data;
    angular.forEach(viewsConfig, function(config, view) {
        "singleTable" === config.template && (singleTableConfig[view] = config);
    });
} ]);